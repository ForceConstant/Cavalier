using Gtk 4.0;
using Adw 1;

Adw.PreferencesWindow _root {
  default-width: 600;
  default-height: 500;
  modal: false;
  destroy-with-parent: true;
  hide-on-close: true;
  title: _("Preferences");

  Adw.PreferencesPage {
    title: _("Cavalier");
    icon-name: "org.nickvision.cavalier-symbolic";

    Adw.PreferencesGroup {
      title: _("Drawing mode");

      Adw.ActionRow {
        title: _("Wave");
        activatable-widget: _waveCheckButton;

        [prefix]
        Gtk.CheckButton _waveCheckButton {}
      }

      Adw.ActionRow {
        title: _("Bars");
        activatable-widget: _barsCheckButton;

        [prefix]
        Gtk.CheckButton _barsCheckButton {
          group: _waveCheckButton;
        }
      }
    }

    Adw.PreferencesGroup {
      Adw.ComboRow _mirrorRow {
        title: _("Mirror");
      }
    }

    Adw.PreferencesGroup {
      Adw.ActionRow {
        title: _("Drawing area margin");
        subtitle: _("Size of gaps around drawing area (in pixels).");

        [suffix]
        Gtk.Scale _marginScale {
          width-request: 180;
          draw-value: true;
          value-pos: left;
          digits: 0;
          adjustment: Gtk.Adjustment {
            lower: 0;
            upper: 40;
            step-increment: 1;
          };
        }
      }

      Adw.ComboRow _directionRow {
        title: _("Drawing direction");
        model: Gtk.StringList {
          strings ["Top to bottom", "Bottom to top", "Left to right", "Right to left" ]
        };
      }

      Adw.ActionRow _offsetRow {
        title: _("Offset between items");
        subtitle: _("The size of spaces between elements (in percent).");

        [suffix]
        Gtk.Scale _offsetScale {
          width-request: 180;
          draw-value: true;
          value-pos: left;
          digits: 0;
          adjustment: Gtk.Adjustment {
            lower: 0;
            upper: 20;
            step-increment: 1;
          };
        }
      }

      Adw.ActionRow _roundnessRow {
        title: _("Roundness of items");
        subtitle: _("How much rounded the elements should be (in percent).");

        [suffix]
        Gtk.Scale _roundnessScale {
          width-request: 180;
          draw-value: true;
          value-pos: left;
          digits: 0;
          adjustment: Gtk.Adjustment {
            lower: 0;
            upper: 100;
            step-increment: 1;
          };
        }
      }

      Adw.ActionRow {
        title: _("Filling");
        subtitle: _("Whether shapes should be filled or outlined.");
        activatable-widget: _fillingSwitch;

        [suffix]
        Gtk.Switch _fillingSwitch {
          valign: center;
        }
      }

      Adw.ActionRow _thicknessRow {
        title: _("Thickness of lines");
        subtitle: _("Thickness of lines when filling is off (in pixels).");
        sensitive: bind _fillingSwitch.active inverted;

        [suffix]
        Gtk.Scale _thicknessScale {
          width-request: 180;
          draw-value: true;
          value-pos: left;
          digits: 0;
          adjustment: Gtk.Adjustment {
            lower: 1;
            upper: 10;
            step-increment: 1;
          };
        }
      }
    }

    Adw.PreferencesGroup {
      Adw.ActionRow {
        title: _("Borderless window");
        subtitle: _("Whether to disable window shadow and borders.");
        activatable-widget: _borderlessSwitch;

        [suffix]
        Gtk.Switch _borderlessSwitch {
          valign: center;
        }
      }

      Adw.ActionRow {
        title: _("Sharp corners");
        subtitle: _("Whether the main window corners should be sharp.");
        activatable-widget: _sharpCornersSwitch;

        [suffix]
        Gtk.Switch _sharpCornersSwitch {
          valign: center;
        }
      }

      Adw.ActionRow {
        title: _("Window controls");
        subtitle: _("Whether to show window control buttons.");
        activatable-widget: _windowControlsSwitch;

        [suffix]
        Gtk.Switch _windowControlsSwitch {
          valign: center;
        }
      }

      Adw.ActionRow {
        title: _("Autohide headerbar");
        subtitle: _("Whether to hide headerbar when main window is not focused.");
        activatable-widget: _autohideHeaderSwitch;

        [suffix]
        Gtk.Switch _autohideHeaderSwitch {
          valign: center;
        }
      }
    }
  }

  Adw.PreferencesPage {
    title: "CAVA";
    icon-name: "utilities-terminal-symbolic";

    Adw.PreferencesGroup {
      Adw.ComboRow _framerateRow {
        title: _("Framerate");
        subtitle: _("Number of frames per second.");
        model: Gtk.StringList {
          strings ["30", "60", "90", "120"]
        };
      }

      Adw.ActionRow {
        title: _("Number of bars");

        [suffix]
        Gtk.Scale _barsScale {
          width-request: 180;
          draw-value: true;
          value-pos: left;
          digits: 0;
          adjustment: Gtk.Adjustment {
            lower: 6;
            upper: 50;
            step-increment: 2;
          };
        }
      }

      Adw.ActionRow {
        title: _("Automatic sensitivity");
        subtitle: _("Attempt to decrease sensitivity if the bars peak.");
        activatable-widget: _autosensSwitch;

        [suffix]
        Gtk.Switch _autosensSwitch {
          valign: center;
        }
      }

      Adw.ActionRow {
        title: _("Sensitivity");
        subtitle: _("Manual sensitivity. If automatic sensitivity is enabled, this will only be the initial value.");

        [suffix]
        Gtk.Scale _sensitivityScale {
          width-request: 150;
          draw-value: false;
          adjustment: Gtk.Adjustment {
            lower: 10;
            upper: 250;
            step-increment: 10;
          };
        }
      }

      Adw.ActionRow {
        title: _("Channels");

        [suffix]
        Gtk.Box {
          valign: center;

          Gtk.ToggleButton _monoButton {
            label: _("Mono");
          }

          Gtk.ToggleButton _stereoButton {
            label: _("Stereo");
            active: bind _monoButton.active inverted bidirectional;
          }

          styles ["linked"]
        }
      }

      Adw.ActionRow {
        title: _("Monstercat smoothing");
        subtitle: _("Whether to enable the so-called «Monstercat smoothing».");
        activatable-widget: _monstercatSwitch;

        [suffix]
        Gtk.Switch _monstercatSwitch {
          valign: center;
        }
      }

      Adw.ActionRow {
        title: _("Noise reduction");
        subtitle: _("This factor adjusts the integral and gravity filters to keep the signal smooth.\nHigher value leads to a slower and smoother result.");

        [suffix]
        Gtk.Scale _noiseReductionScale {
          width-request: 190;
          draw-value: true;
          value-pos: left;
          digits: 2;
          adjustment: Gtk.Adjustment {
            lower: 0.15;
            upper: 0.95;
            step-increment: 0.01;
          };
        }
      }

      Adw.ActionRow {
        title: _("Reverse order");
        subtitle: _("Whether to reverse order of bars for each channel.");
        activatable-widget: _reverseSwitch;

        [suffix]
        Gtk.Switch _reverseSwitch {
          valign: center;
        }
      }
    }
  }

  Adw.PreferencesPage {
    title: _("Colors");
    icon-name: "applications-graphics-symbolic";
  }
}